# bot.py
import os
import re
import json
import logging
from decimal import Decimal, ROUND_HALF_UP
from dataclasses import dataclass, field
from typing import Dict, List, Tuple

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ================== CONFIG & LOGGING ==================
BOT_TOKEN = os.getenv("BOT_TOKEN", "8388611917:AAGRocL81MTfM4zQRJvcEwY8d1XJ831sTKs") 
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://bill-splitter-bot.netlify.app/")

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s [%(levelname)s] %(message)s",
)
log = logging.getLogger("bill_splitter")

UZS = "UZS"
Q3 = Decimal("0.001")  # —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥—Ä–æ–±–Ω—ã—Ö –ø–æ—Ä—Ü–∏–π
Q2 = Decimal("0.01")   # —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞

# ================== DATA MODELS ==================
@dataclass
class Dish:
    name: str
    qty_total: Decimal            # –≤—Å–µ–≥–æ —à—Ç—É–∫ –≤ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä–æ–±–Ω—ã–º, –Ω–∞–ø—Ä. 0.7)
    line_total: Decimal           # —Å—É–º–º–∞ –∑–∞ –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
    assigned: List[Decimal] = field(default_factory=list)  # –ø–æ –ª—é–¥—è–º: —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –Ω–∞–∑–Ω–∞—á–∏–ª–∏

    @property
    def unit_price(self) -> Decimal:
        if self.qty_total == 0:
            return Decimal(0)
        return (self.line_total / self.qty_total).quantize(Q3, rounding=ROUND_HALF_UP)

    def remaining(self) -> Decimal:
        return (self.qty_total - sum(self.assigned)).quantize(Q3)

@dataclass
class Bill:
    people: List[str] = field(default_factory=list)
    dishes: List[Dish] = field(default_factory=list)
    service_pct: Decimal = Decimal("0")  # 0..100

    def ensure_assign_matrix(self):
        for d in self.dishes:
            need = len(self.people) - len(d.assigned)
            if need > 0:
                d.assigned.extend([Decimal(0)] * need)

# —á–∞—Ç -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ
STATE: Dict[int, Bill] = {}

# ================== HELPERS ==================
def fmt_money(n: int | Decimal) -> str:
    n = int(Decimal(n).quantize(Decimal("1."), rounding=ROUND_HALF_UP))
    return f"{n:,}".replace(",", " ")

def kb_main() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üßæ –ù–æ–≤—ã–π —Å—á—ë—Ç"), KeyboardButton("‚ûï –ë–ª—é–¥–æ"), KeyboardButton("üë§ –£—á–∞—Å—Ç–Ω–∏–∫")],
            [KeyboardButton("üçΩ –ù–∞–∑–Ω–∞—á–∏—Ç—å"), KeyboardButton("‚öôÔ∏è –°–µ—Ä–≤–∏—Å"), KeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å")],
            [KeyboardButton("üßÆ Open (WebApp)", web_app=WebAppInfo(url=WEBAPP_URL))],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )

def parse_dish_freeform(text: str) -> Tuple[str, Decimal, Decimal]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
      1) ¬´–∞—Å—Å–æ—Ä—Ç–∏ 2 —à—Ç 28000¬ª
      2) ¬´–ø–ª–æ–≤ 45000¬ª  (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 1)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (name, qty_total, line_total)
    """
    s = text.strip()
    # <name> <qty> —à—Ç <sum>
    m = re.search(r"(.*)\s+(\d+(?:[.,]\d+)?)\s*—à—Ç\s+(\d+(?:[.,]\d+)?)\s*$", s, flags=re.I)
    if m:
        name = m.group(1).strip()
        qty = Decimal(m.group(2).replace(",", "."))
        line_total = Decimal(m.group(3).replace(",", "."))
        if qty <= 0 or line_total < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0, —Å—É–º–º–∞ ‚Äî ‚â• 0.")
        return name, qty, line_total

    # <name> <sum>  => qty=1
    m = re.search(r"^(.*)\s+(\d+(?:[.,]\d+)?)\s*$", s)
    if m:
        name = m.group(1).strip()
        qty = Decimal(1)
        line_total = Decimal(m.group(2).replace(",", "."))
        if line_total < 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚â• 0.")
        return name, qty, line_total

    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ. –§–æ—Ä–º–∞—Ç: (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) —à—Ç (—Å—É–º–º–∞) ‚Äî –ª–∏–±–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ) (—Å—É–º–º–∞).")

def person_checkmarks(bill: Bill) -> List[bool]:
    marks = []
    for i, _ in enumerate(bill.people):
        any_assigned = any(d.assigned and d.assigned[i] > 0 for d in bill.dishes)
        marks.append(any_assigned)
    return marks

def build_people_keyboard(bill: Bill) -> InlineKeyboardMarkup:
    rows = []
    marks = person_checkmarks(bill)
    for i, name in enumerate(bill.people):
        mark = " ‚úÖ" if marks[i] else ""
        rows.append([InlineKeyboardButton(f"{i+1}. {name}{mark}", callback_data=f"pick_person:{i}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    return InlineKeyboardMarkup(rows)

def build_assign_keyboard(bill: Bill, p_idx: int) -> InlineKeyboardMarkup:
    rows = []
    for i, d in enumerate(bill.dishes):
        left = (d.qty_total - sum(d.assigned)).quantize(Q3)
        left_i = int(left)           # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ü–µ–ª—ã–º–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –Ω–∞–≥–ª—è–¥–Ω–æ
        qty_i = int(d.qty_total)
        has_this = d.assigned[p_idx] > 0
        mark = " ‚úÖ" if has_this else ""
        label = f"{d.name} ({left_i}/{qty_i}){mark}"
        rows.append([InlineKeyboardButton(label, callback_data=f"plus:{p_idx}:{i}")])
    rows.append([InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"clear_person:{p_idx}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_people")])
    return InlineKeyboardMarkup(rows)

def summarize_choices_for_person(bill: Bill, p_idx: int) -> str:
    parts = []
    for d in bill.dishes:
        if d.assigned and d.assigned[p_idx] > 0:
            parts.append(f"‚Ä¢ {d.name} √ó {int(d.assigned[p_idx])}")
    return "\n".join(parts) if parts else "‚Äî"

def calc_base_total(bill: Bill) -> Decimal:
    return sum((d.line_total for d in bill.dishes), start=Decimal(0))

def format_dishes_list(bill: Bill) -> str:
    if not bill.dishes:
        return "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª—é–¥"
    lines = []
    for i, d in enumerate(bill.dishes, start=1):
        qty_i = int(d.qty_total)
        unit_i = int(d.unit_price)
        sum_i = int(d.line_total)
        lines.append(f"{i}. {d.name} ‚Äî {qty_i} —à—Ç √ó {fmt_money(unit_i)} {UZS} = {fmt_money(sum_i)} {UZS}")
    return "\n".join(lines)

# ================== –†–ê–°–ß–Å–¢ ==================
def compute_summary_details(bill: Bill) -> Tuple[int, int, List[int], List[int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      total_no_service (int),
      service_amount_total (int),
      per_person_int (List[int]),
      service_each (List[int])
    –õ–û–ì–ò–ö–ê:
      - –∫–∞–∂–¥–æ–º—É –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏: assigned[i] * unit_price
      - –µ—Å–ª–∏ —É –±–ª—é–¥–∞ –æ—Å—Ç–∞–ª—Å—è –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (>0) ‚Äî –¥–µ–ª–∏–º –µ–≥–æ –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –í–°–ï–ú–ò
      - –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    """
    n = max(1, len(bill.people))
    per_person = [Decimal(0)] * n

    # –ø–æ –≤—Å–µ–º –±–ª—é–¥–∞–º: –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ + –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Ä–æ–≤–Ω—É
    for d in bill.dishes:
        unit = d.unit_price
        assigned_sum = sum(d.assigned) if d.assigned else Decimal(0)
        # –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ
        for i in range(n):
            take = d.assigned[i] if (d.assigned and i < len(d.assigned)) else Decimal(0)
            if take > 0:
                per_person[i] += (take * unit)
        # –æ—Å—Ç–∞—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å)
        left = (d.qty_total - assigned_sum)
        if left > 0:
            share = (left / n)
            # –≤–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ –¥—Ä–æ–±–Ω—É—é –¥–æ–ª—é –∫–∞–∂–¥–æ–º—É, –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ ‚Äî –ø–æ–∑–∂–µ
            for i in range(n):
                per_person[i] += (share * unit)

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ int c –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º HALF_UP
    per_person_int = [int(x.quantize(Decimal("1."), rounding=ROUND_HALF_UP)) for x in per_person]

    # —Å—É–º–º–∞ –±–µ–∑ —Å–µ—Ä–≤–∏—Å–∞ ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –ø–æ –ª—é–¥—è–º (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å—É–º–º–æ–π –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π, –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ ¬±1 –Ω–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è—Ö)
    total_no_service = sum(per_person_int)

    # —Å–µ—Ä–≤–∏—Å —Å—á–∏—Ç–∞–µ–º –æ—Ç –ö–ê–ñ–î–û–ì–û per_person_int (–∫–∞–∫ —É –≤–∞—Å –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö)
    service_each = [
        int((Decimal(p) * bill.service_pct / Decimal(100)).quantize(Decimal("1."), rounding=ROUND_HALF_UP))
        for p in per_person_int
    ]
    service_amount_total = sum(service_each)

    return total_no_service, service_amount_total, per_person_int, service_each

# ================== HANDLERS ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in STATE:
        STATE[chat_id] = Bill()
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n"
        "–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –Ω–∞–∂–º–∏—Ç–µ ¬´üßÆ Open (WebApp)¬ª.",
        reply_markup=kb_main(),
    )

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = (update.message.text or "").strip()
    bill = STATE.setdefault(chat_id, Bill())

    if text == "üßæ –ù–æ–≤—ã–π —Å—á—ë—Ç":
        STATE[chat_id] = Bill()
        await update.message.reply_text("–ù–æ–≤—ã–π —Å—á—ë—Ç –Ω–∞—á–∞—Ç. –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=kb_main())
        return

    if text == "‚öôÔ∏è –°–µ—Ä–≤–∏—Å":
        context.user_data["mode"] = "svc"
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0‚Äì100):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True),
        )
        return

    if context.user_data.get("mode") == "svc":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data.pop("mode", None)
            await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())
            return
        try:
            pct = int(text)
            pct = max(0, min(100, pct))
        except Exception:
            await update.message.reply_text("–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return

        bill.service_pct = Decimal(pct)
        context.user_data.pop("mode", None)

        base_total = calc_base_total(bill)
        service_total = (base_total * bill.service_pct / Decimal(100)).quantize(Q2, rounding=ROUND_HALF_UP)
        total = base_total + service_total

        dishes_block = format_dishes_list(bill)
        msg = (
            f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {pct}%\n\n"
            f"üìã –°–ø–∏—Å–æ–∫ –±–ª—é–¥:\n{dishes_block}\n\n"
            f"üßÆ –ò—Ç–æ–≥–æ –±–µ–∑ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base_total)} {UZS}\n"
            f"üßæ –°–µ—Ä–≤–∏—Å {pct}%: {fmt_money(service_total)} {UZS}\n"
            f"üí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {fmt_money(total)} {UZS}"
        )
        await update.message.reply_text(msg, reply_markup=kb_main())
        return

    if text == "‚ûï –ë–ª—é–¥–æ":
        context.user_data["mode"] = "add_dish"
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é. –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Ç–∞–∫: (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) —à—Ç (—Å—É–º–º–∞)\n"
            "–õ–∏–±–æ: (–Ω–∞–∑–≤–∞–Ω–∏–µ) (—Å—É–º–º–∞)",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True),
        )
        return

    if context.user_data.get("mode") == "add_dish":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data.pop("mode", None)
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())
            return
        try:
            name, qty, line_total = parse_dish_freeform(text)
        except Exception as e:
            await update.message.reply_text(str(e))
            return

        d = Dish(name=name, qty_total=qty, line_total=line_total)
        d.assigned = [Decimal(0)] * len(bill.people)
        bill.dishes.append(d)
        context.user_data.pop("mode", None)

        dishes_block = format_dishes_list(bill)
        base_total = calc_base_total(bill)
        msg = (
            f"‚úÖ –ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {name} ‚Äî {int(qty)} —à—Ç √ó {fmt_money(int(d.unit_price))} {UZS} = {fmt_money(int(line_total))} {UZS}\n\n"
            f"üìã –°–ø–∏—Å–æ–∫ –±–ª—é–¥:\n{dishes_block}\n\n"
            f"üßÆ –°—É–º–º–∞ –±–µ–∑ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base_total)} {UZS}"
        )
        if bill.service_pct and bill.service_pct > 0:
            service_total = (base_total * bill.service_pct / Decimal(100)).quantize(Q2, rounding=ROUND_HALF_UP)
            msg += (
                f"\nüßæ –°–µ—Ä–≤–∏—Å {int(bill.service_pct)}%: {fmt_money(service_total)} {UZS}"
                f"\nüí∞ –ò—Ç–æ–≥–æ: {fmt_money(base_total + service_total)} {UZS}"
            )
        await update.message.reply_text(msg, reply_markup=kb_main())
        return

    if text == "üë§ –£—á–∞—Å—Ç–Ω–∏–∫":
        context.user_data["mode"] = "add_person"
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True),
        )
        return

    if context.user_data.get("mode") == "add_person":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data.pop("mode", None)
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())
            return
        name = text.strip()
        if not name:
            await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return
        bill.people.append(name)
        for d in bill.dishes:
            d.assigned.append(Decimal(0))
        context.user_data.pop("mode", None)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: {name}\nüë• –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: " + ", ".join(bill.people),
            reply_markup=kb_main()
        )
        return

    if text == "üçΩ –ù–∞–∑–Ω–∞—á–∏—Ç—å":
        if not bill.people or not bill.dishes:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=kb_main())
            return
        await update.message.reply_text("–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ–º? –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=build_people_keyboard(bill))
        return

    if text == "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å":
        if not bill.people or not bill.dishes:
            await update.message.reply_text("–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=kb_main())
            return

        base_total, service_total, per_base, per_svc = compute_summary_details(bill)

        lines = [
            "üßÆ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç:",
            f"–ë–µ–∑ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base_total)} {UZS}",
            f"–°–µ—Ä–≤–∏—Å {int(bill.service_pct)}%: {fmt_money(service_total)} {UZS}",
            f"üí∞ –ò—Ç–æ–≥–æ: {fmt_money(base_total + service_total)} {UZS}",
            "",
            "üë• –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:",
        ]
        for i, name in enumerate(bill.people):
            lines.append(
                f"{i+1}. {name} ‚Äî {fmt_money(per_base[i] + per_svc[i])} {UZS}  "
                f"(–¥–æ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(per_base[i])} {UZS}, +{fmt_money(per_svc[i])} {UZS})"
            )
        await update.message.reply_text("\n".join(lines), reply_markup=kb_main())
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=kb_main())

# ================== CALLBACKS (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ) ==================
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    bill = STATE.setdefault(chat_id, Bill())
    data = query.data or ""

    if data == "back_main":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb_main())
        return

    if data in ("back_people", "assign_back"):
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=build_people_keyboard(bill))
        return

    if data.startswith("pick_person:"):
        p_idx = int(data.split(":")[1])
        await show_assign_screen(update, bill, p_idx)
        return

    if data.startswith("clear_person:"):
        p_idx = int(data.split(":")[1])
        bill.ensure_assign_matrix()
        for d in bill.dishes:
            d.assigned[p_idx] = Decimal(0)
        await show_assign_screen(update, bill, p_idx, flash="üßπ –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω.")
        return

    if data.startswith("plus:"):
        _, p_s, d_s = data.split(":")
        p_idx, d_idx = int(p_s), int(d_s)
        bill.ensure_assign_matrix()
        d = bill.dishes[d_idx]
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        if (sum(d.assigned) + Decimal(1)) > d.qty_total:
            await show_assign_screen(update, bill, p_idx, flash="‚ùó –û—Å—Ç–∞—Ç–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç.")
            return
        d.assigned[p_idx] = d.assigned[p_idx] + Decimal(1)
        await show_assign_screen(update, bill, p_idx)
        return

async def show_assign_screen(update: Update, bill: Bill, p_idx: int, flash: str | None = None):
    bill.ensure_assign_matrix()
    chosen = summarize_choices_for_person(bill, p_idx)
    head = (
        (flash + "\n\n") if flash else ""
    ) + f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: *{bill.people[p_idx]}*\n" \
        f"–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –±–ª—é–¥–æ ‚Äî –∫–∞–∂–¥—ã–π —Ç–∞–ø –¥–æ–±–∞–≤–ª—è–µ—Ç 1 —à—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫).\n\n" \
        f"üßæ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{chosen}"

    await update.callback_query.edit_message_text(
        head,
        parse_mode="Markdown",
        reply_markup=build_assign_keyboard(bill, p_idx)
    )

# ================== HANDLER –î–ê–ù–ù–´–• –ò–ó WEBAPP ==================
def _format_webapp_message(data: dict) -> str:
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º ¬´legacy¬ª –∏ ¬´builder¬ª —Ñ–æ—Ä–º–∞—Ç—ã
    if "people" in data or "base_total" in data:
        def g(key, default=0):
            return int(Decimal(str(data.get(key, default))).quantize(Decimal("1."), rounding=ROUND_HALF_UP))

        base_total   = g("base_total")
        service_pct  = int(Decimal(str(data.get("service_pct", 0))).quantize(Decimal("1.")))
        service_total= g("service_total")
        total        = g("total")

        people = data.get("people", [])
        lines = [
            "üßÆ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç:",
            f"–ë–µ–∑ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base_total)} {UZS}",
            f"–°–µ—Ä–≤–∏—Å {service_pct}%: {fmt_money(service_total)} {UZS}",
            f"üí∞ –ò—Ç–æ–≥–æ: {fmt_money(total)} {UZS}",
            "",
            "üë• –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:",
        ]
        for idx, p in enumerate(people, start=1):
            name    = p.get("name", f"–£—á–∞—Å—Ç–Ω–∏–∫ {idx}")
            base    = g("base", p.get("base", 0))
            svc     = g("service", p.get("service", 0))
            p_total = g("total", p.get("total", base + svc))
            lines.append(
                f"{idx}. {name} ‚Äî {fmt_money(p_total)} {UZS}  "
                f"(–¥–æ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base)} {UZS}, +{fmt_money(svc)} {UZS})"
            )
        return "\n".join(lines)

    # Builder WebApp —Ñ–æ—Ä–º–∞—Ç
    service_pct = Decimal(str(data.get("servicePercent", 0)))
    participants = data.get("participants", [])
    dishes = data.get("dishes", [])

    id_to_idx = {p["id"]: i for i, p in enumerate(participants) if "id" in p}

    per_base = [Decimal(0) for _ in participants]
    base_total = Decimal(0)

    for d in dishes:
        qty = Decimal(str(d.get("qty", 0)))
        total_price = Decimal(str(d.get("totalPrice", 0)))
        assignments = d.get("assignments", [])
        if qty <= 0:
            continue
        unit = (total_price / qty).quantize(Q3, rounding=ROUND_HALF_UP)
        base_total += total_price
        # —Å—É–º–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —é–Ω–∏—Ç—ã
        for a in assignments:
            if a is None:
                continue
            idx = id_to_idx.get(a)
            if idx is not None:
                per_base[idx] += unit
        # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å ‚Äî –¥–µ–ª–∏–º –µ—ë –ø–æ—Ä–æ–≤–Ω—É
        assigned_units = Decimal(len([a for a in assignments if a is not None]))
        left = (qty - assigned_units)
        if left > 0 and len(participants) > 0:
            share = (left / len(participants))
            for i in range(len(participants)):
                per_base[i] += (share * unit)

    per_svc = [(b * service_pct / Decimal(100)).quantize(Q2, rounding=ROUND_HALF_UP) for b in per_base]
    service_total = (base_total * service_pct / Decimal(100)).quantize(Q2, rounding=ROUND_HALF_UP)

    lines = [
        "üßÆ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç:",
        f"–ë–µ–∑ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base_total)} {UZS}",
        f"–°–µ—Ä–≤–∏—Å {int(service_pct)}%: {fmt_money(service_total)} {UZS}",
        f"üí∞ –ò—Ç–æ–≥–æ: {fmt_money(base_total + service_total)} {UZS}",
        "",
        "üë• –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:",
    ]
    for i, p in enumerate(participants, start=1):
        name = p.get("name", f"–£—á–∞—Å—Ç–Ω–∏–∫ {i}")
        base = int(per_base[i-1].quantize(Decimal("1."), rounding=ROUND_HALF_UP))
        svc = int(per_svc[i-1].quantize(Decimal("1."), rounding=ROUND_HALF_UP))
        total = base + svc
        lines.append(
            f"{i}. {name} ‚Äî {fmt_money(total)} {UZS}  "
            f"(–¥–æ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base)} {UZS}, +{fmt_money(svc)} {UZS})"
        )
    return "\n".join(lines)

async def on_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    wad = update.message.web_app_data  # type: ignore[attr-defined]
    if not wad:
        return

    try:
        data = json.loads(wad.data or "{}")
    except Exception as e:
        log.exception("Bad web_app_data JSON: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥ –∏–∑ WebApp.", reply_markup=kb_main())
        return

    text = _format_webapp_message(data)
    await update.message.reply_text(text, reply_markup=kb_main())

# ================== BOOT ==================
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, on_web_app_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_handler(CallbackQueryHandler(on_callback))

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling). LOG_LEVEL=%s", LOG_LEVEL)
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
