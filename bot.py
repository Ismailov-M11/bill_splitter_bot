# bot.py
import os
import re
import json
import logging
from decimal import Decimal, ROUND_HALF_UP
from dataclasses import dataclass, field
from typing import Dict, List, Tuple

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ================== CONFIG & LOGGING ==================
BOT_TOKEN = os.getenv("BOT_TOKEN", "8388611917:AAEL-NwaqhEBlQFT_waK5iwy3ehiydBZgbU")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://bill-splitter-bot.netlify.app/")

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s [%(levelname)s] %(message)s",
)
log = logging.getLogger("bill_splitter")

UZS = "UZS"
Q3 = Decimal("0.001")  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ç—ã—Å—è—á–Ω—ã—Ö

# ================== DATA MODELS ==================
@dataclass
class Dish:
    name: str
    qty_total: Decimal            # –≤—Å–µ–≥–æ —à—Ç—É–∫ –≤ –ø–æ–∑–∏—Ü–∏–∏
    line_total: Decimal           # —Å—É–º–º–∞ –∑–∞ –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
    assigned: List[Decimal] = field(default_factory=list)  # –ø–æ –ª—é–¥—è–º, —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –Ω–∞–∑–Ω–∞—á–∏–ª–∏

    @property
    def unit_price(self) -> Decimal:
        if self.qty_total == 0:
            return Decimal(0)
        return self.line_total / self.qty_total   # —Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 1 —à—Ç

    @property
    def qty_left(self) -> Decimal:
        return (self.qty_total - sum(self.assigned)).quantize(Q3)

@dataclass
class Bill:
    people: List[str] = field(default_factory=list)
    dishes: List[Dish] = field(default_factory=list)
    service_pct: Decimal = Decimal("0")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0%

    def ensure_assign_matrix(self):
        for d in self.dishes:
            need = len(self.people) - len(d.assigned)
            if need > 0:
                d.assigned.extend([Decimal(0)] * need)

# —á–∞—Ç -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞)
STATE: Dict[int, Bill] = {}

# ================== HELPERS ==================
def fmt_money(n: int | Decimal) -> str:
    n = int(n)
    return f"{n:,}".replace(",", " ")

def kb_main():
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp –ø—Ä—è–º–æ –≤ —á–∞—Ç
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üßæ –ù–æ–≤—ã–π —Å—á—ë—Ç"), KeyboardButton("‚ûï –ë–ª—é–¥–æ"), KeyboardButton("üë§ –£—á–∞—Å—Ç–Ω–∏–∫")],
            [KeyboardButton("üçΩ –ù–∞–∑–Ω–∞—á–∏—Ç—å"), KeyboardButton("‚öôÔ∏è –°–µ—Ä–≤–∏—Å"), KeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å")],
            [KeyboardButton("üßÆ Open (WebApp)", web_app=WebAppInfo(url=WEBAPP_URL))],
        ],
        resize_keyboard=True,
    )

def parse_dish_freeform(text: str) -> Tuple[str, Decimal, Decimal]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      1) '(–Ω–∞–∑–≤–∞–Ω–∏–µ) (N) —à—Ç (—Ü–µ–Ω–∞_–∑–∞_–≤—Å—é_–ø–æ–∑–∏—Ü–∏—é)' -> qty=N, line_total=—Ü–µ–Ω–∞_–ø–æ–∑–∏—Ü–∏–∏
      2) '(–Ω–∞–∑–≤–∞–Ω–∏–µ) (—Ü–µ–Ω–∞_–ø–æ–∑–∏—Ü–∏–∏)'               -> qty=1
    """
    t = text.strip()

    m = re.search(
        r"^(?P<name>.+?)\s+(?P<qty>\d+(?:[.,]\d+)?)\s*—à—Ç(?:—É–∫)?\s+(?P<price>\d[\d\s]*)$",
        t, re.IGNORECASE
    )
    if m:
        name = m.group("name").strip()
        qty = Decimal(m.group("qty").replace(",", "."))
        line_total = Decimal(m.group("price").replace(" ", ""))
        return name, qty, line_total

    m = re.search(r"^(?P<name>.+?)\s+(?P<price>\d[\d\s]*)$", t)
    if m:
        name = m.group("name").strip()
        qty = Decimal("1")
        line_total = Decimal(m.group("price").replace(" ", ""))
        return name, qty, line_total

    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ. –§–æ—Ä–º–∞—Ç: (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) —à—Ç (—Ü–µ–Ω–∞) ‚Äî –ª–∏–±–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ) (—Ü–µ–Ω–∞).")

def person_checkmarks(bill: Bill) -> List[bool]:
    marks = []
    for i, _ in enumerate(bill.people):
        any_assigned = any(d.assigned and d.assigned[i] > 0 for d in bill.dishes)
        marks.append(any_assigned)
    return marks

def build_people_keyboard(bill: Bill) -> InlineKeyboardMarkup:
    rows = []
    marks = person_checkmarks(bill)
    for i, name in enumerate(bill.people):
        mark = " ‚úÖ" if marks[i] else ""
        rows.append([InlineKeyboardButton(f"{i+1}. {name}{mark}", callback_data=f"pick_person:{i}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    return InlineKeyboardMarkup(rows)

def build_assign_keyboard(bill: Bill, p_idx: int) -> InlineKeyboardMarkup:
    rows = []
    for i, d in enumerate(bill.dishes):
        left = (d.qty_total - sum(d.assigned)).quantize(Q3)
        left_i = int(left)           # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        qty_i = int(d.qty_total)
        has_this = d.assigned[p_idx] > 0
        mark = " ‚úÖ" if has_this else ""
        # —Ñ–æ—Ä–º–∞—Ç: ¬´–ß–æ–π—Ö–æ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç (1/2) ‚úÖ¬ª
        label = f"{d.name} ({left_i}/{qty_i}){mark}"
        rows.append([InlineKeyboardButton(label, callback_data=f"plus:{p_idx}:{i}")])
    rows.append([InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"clear_person:{p_idx}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_people")])
    return InlineKeyboardMarkup(rows)

def summarize_choices_for_person(bill: Bill, p_idx: int) -> str:
    parts = []
    for d in bill.dishes:
        if d.assigned and d.assigned[p_idx] > 0:
            parts.append(f"‚Ä¢ {d.name} √ó {int(d.assigned[p_idx])}")
    return "\n".join(parts) if parts else "‚Äî"

# ================== COMMANDS ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—á—ë—Ç –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å WebApp (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).",
        reply_markup=kb_main()
    )

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = (update.message.text or "").strip()
    bill = STATE.setdefault(chat_id, Bill())

    if text == "üßæ –ù–æ–≤—ã–π —Å—á—ë—Ç":
        STATE[chat_id] = Bill()
        await update.message.reply_text("üßæ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—á—ë—Ç.", reply_markup=kb_main())
        return

    if text == "‚ûï –ë–ª—é–¥–æ":
        context.user_data["mode"] = "add_dish"
        await update.message.reply_text(
            "üçΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.\n"
            "–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Ç–∞–∫: (–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) —à—Ç (—Ü–µ–Ω–∞).",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True),
        )
        return

    if context.user_data.get("mode") == "add_dish":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data.pop("mode", None)
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())
            return
        try:
            name, qty, line_total = parse_dish_freeform(text)
        except ValueError as e:
            await update.message.reply_text(str(e))
            return
        d = Dish(name=name, qty_total=qty, line_total=line_total)
        d.assigned = [Decimal(0)] * len(bill.people)
        bill.dishes.append(d)
        context.user_data.pop("mode", None)

        # üëâ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å —Å—É–º–º–∞–º–∏: ¬´qty √ó unit = line_total¬ª
        def unit_i(x: Dish) -> int:
            return int(x.unit_price.to_integral_value(rounding=ROUND_HALF_UP))

        items = "\n".join(
            f"{i+1}. {x.name} ‚Äî {int(x.qty_total)} —à—Ç √ó {fmt_money(unit_i(x))} {UZS} = {fmt_money(int(x.line_total))} {UZS}"
            for i, x in enumerate(bill.dishes)
        )
        await update.message.reply_text(
            f"‚úÖ –ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {d.name} ‚Äî {int(d.qty_total)} —à—Ç √ó {fmt_money(unit_i(d))} {UZS} = {fmt_money(int(d.line_total))} {UZS}\n"
            f"üìã –°–ø–∏—Å–æ–∫ –±–ª—é–¥:\n{items}",
            reply_markup=kb_main()
        )
        return

    if text == "üë§ –£—á–∞—Å—Ç–Ω–∏–∫":
        context.user_data["mode"] = "add_person"
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True),
        )
        return

    if context.user_data.get("mode") == "add_person":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data.pop("mode", None)
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())
            return
        name = text.strip()
        if not name:
            await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return
        bill.people.append(name)
        for d in bill.dishes:
            d.assigned.append(Decimal(0))
        context.user_data.pop("mode", None)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: {name}\nüë• –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: " + ", ".join(bill.people),
            reply_markup=kb_main()
        )
        return

    if text == "üçΩ –ù–∞–∑–Ω–∞—á–∏—Ç—å":
        if not bill.people or not bill.dishes:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ –∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.", reply_markup=kb_main())
            return
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=build_people_keyboard(bill))
        return

    if text == "‚öôÔ∏è –°–µ—Ä–≤–∏—Å":
        context.user_data["mode"] = "set_service"
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å: {bill.service_pct}%.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 30 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True),
        )
        return

    if context.user_data.get("mode") == "set_service":
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data.pop("mode", None)
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())
            return
        try:
            p = Decimal(text)
            if p < 0 or p > 30:
                raise ValueError
        except Exception:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 30 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
            return
        bill.service_pct = p
        context.user_data.pop("mode", None)
        await update.message.reply_text(f"–°–µ—Ä–≤–∏—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bill.service_pct}%.", reply_markup=kb_main())
        return

    if text == "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å":
        await send_summary(update, bill)
        return

    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=kb_main())

# ================== CALLBACKS (–º–µ–Ω—é –±–æ—Ç–∞) ==================
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    chat_id = query.message.chat_id
    bill = STATE.setdefault(chat_id, Bill())
    log.debug("CALLBACK '%s'", data)

    if data == "back_main":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.", reply_markup=kb_main())
        return

    if data in ("back_people", "assign_back"):
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=build_people_keyboard(bill))
        return

    if data.startswith("pick_person:"):
        p_idx = int(data.split(":")[1])
        await show_assign_screen(update, bill, p_idx)
        return

    if data.startswith("clear_person:"):
        p_idx = int(data.split(":")[1])
        bill.ensure_assign_matrix()
        for d in bill.dishes:
            d.assigned[p_idx] = Decimal(0)
        await show_assign_screen(update, bill, p_idx, flash="üßπ –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω.")
        return

    if data.startswith("plus:"):
        _, p_s, d_s = data.split(":")
        p_idx, d_idx = int(p_s), int(d_s)
        bill.ensure_assign_matrix()
        d = bill.dishes[d_idx]
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        if (sum(d.assigned) + Decimal(1)) > d.qty_total:
            await show_assign_screen(update, bill, p_idx, flash="‚ùó –û—Å—Ç–∞—Ç–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç.")
            return
        d.assigned[p_idx] = d.assigned[p_idx] + Decimal(1)
        await show_assign_screen(update, bill, p_idx)
        return

async def show_assign_screen(update: Update, bill: Bill, p_idx: int, flash: str | None = None):
    bill.ensure_assign_matrix()
    chosen = summarize_choices_for_person(bill, p_idx)
    head = (
        (flash + "\n\n") if flash else ""
    ) + f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: *{bill.people[p_idx]}*\n" \
        f"–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –±–ª—é–¥–æ ‚Äî –∫–∞–∂–¥—ã–π —Ç–∞–ø –¥–æ–±–∞–≤–ª—è–µ—Ç 1 —à—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫).\n\n" \
        f"üßæ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{chosen}"

    await update.callback_query.edit_message_text(
        head,
        parse_mode="Markdown",
        reply_markup=build_assign_keyboard(bill, p_idx)
    )

# ================== SUMMARY (–¥–ª—è —Ä–µ–∂–∏–º–∞ –º–µ–Ω—é –±–æ—Ç–∞) ==================
def compute_summary_details(bill: Bill):
    n = max(1, len(bill.people))
    per_person = [Decimal(0)] * n

    # –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏
    for d in bill.dishes:
        unit = d.unit_price
        assigned_sum = sum(d.assigned) if d.assigned else Decimal(0)
        left = (d.qty_total - assigned_sum)
        for i in range(n):
            take = d.assigned[i] if i < len(d.assigned) else Decimal(0)
            per_person[i] += (take * unit)
        if left > 0:
            share = (left / n)
            for i in range(n):
                per_person[i] += (share * unit)

    per_person_int = [int(x.quantize(Decimal("1."), rounding=ROUND_HALF_UP)) for x in per_person]
    total_no_service = sum(per_person_int)

    service_each = [
        int((Decimal(p) * bill.service_pct / Decimal(100)).quantize(Decimal("1."), rounding=ROUND_HALF_UP))
        for p in per_person_int
    ]
    service_amount_total = sum(service_each)
    return total_no_service, service_amount_total, per_person_int, service_each

async def send_summary(update: Update, bill: Bill):
    if not bill.people or not bill.dishes:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –±–ª—é–¥–∞.", reply_markup=kb_main())
        return

    base_total, service_total, per_base, per_svc = compute_summary_details(bill)
    lines = [
        "üßÆ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç:",
        f"–ë–µ–∑ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base_total)} {UZS}",
        f"–°–µ—Ä–≤–∏—Å {bill.service_pct}%: {fmt_money(service_total)} {UZS}",
        f"üí∞ –ò—Ç–æ–≥–æ: {fmt_money(base_total + service_total)} {UZS}",
        "",
        "üë• –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:",
    ]
    for i, name in enumerate(bill.people):
        lines.append(
            f"{i+1}. {name} ‚Äî {fmt_money(per_base[i] + per_svc[i])} {UZS}  "
            f"(–¥–æ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(per_base[i])} {UZS}, +{fmt_money(per_svc[i])} {UZS})"
        )
    await update.message.reply_text("\n".join(lines), reply_markup=kb_main())

# ================== HANDLER –î–ê–ù–ù–´–• –ò–ó WEBAPP ==================
def _format_webapp_message(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É."""
    def g(key, default=0):
        return int(data.get(key, default))

    base_total   = g("base_total")
    service_pct  = int(data.get("service_pct", 0))
    service_total= g("service_total")
    total        = g("total")

    lines = [
        "üßÆ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç:",
        f"–ë–µ–∑ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base_total)} {UZS}",
        f"–°–µ—Ä–≤–∏—Å {service_pct}%: {fmt_money(service_total)} {UZS}",
        f"üí∞ –ò—Ç–æ–≥–æ: {fmt_money(total)} {UZS}",
        "",
        "üë• –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:",
    ]

    people = data.get("people", [])
    for idx, p in enumerate(people, start=1):
        name    = p.get("name", f"–£—á–∞—Å—Ç–Ω–∏–∫ {idx}")
        base    = int(p.get("base", 0))
        svc     = int(p.get("service", 0))
        p_total = int(p.get("total", base + svc))
        lines.append(
            f"{idx}. {name} ‚Äî {fmt_money(p_total)} {UZS}  "
            f"(–¥–æ —Å–µ—Ä–≤–∏—Å–∞: {fmt_money(base)} {UZS}, +{fmt_money(svc)} {UZS})"
        )

    return "\n".join(lines)

async def on_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –∏–∑ WebApp —á–µ—Ä–µ–∑ Telegram.WebApp.sendData(JSON).
    –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç.
    """
    wad = update.message.web_app_data  # type: ignore[attr-defined]
    if not wad:
        return

    try:
        data = json.loads(wad.data or "{}")
    except Exception as e:
        log.exception("Bad web_app_data JSON: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥ –∏–∑ WebApp.", reply_markup=kb_main())
        return

    text = _format_webapp_message(data)
    await update.message.reply_text(text, reply_markup=kb_main())

# ================== BOOT ==================
def main():
    # –±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (–º–µ–Ω—é –∏ web-app data) ‚Äî –Ω–∞ polling
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, on_web_app_data))  # –∏–∑ WebApp
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_handler(CallbackQueryHandler(on_callback))

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling). LOG_LEVEL=%s", LOG_LEVEL)
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
